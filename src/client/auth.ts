import type { AxiosRequestConfig, AxiosResponse } from "axios";
import {
	type GetOrRefreshToken200Response,
	type ObtainToken,
	ObtainTokenGrantTypeEnum,
	type RefreshToken,
	RefreshTokenGrantTypeEnum,
	type TokenErrorResponse,
	type TokenResponse,
	AuthenticationApi as _AuthenticationApi,
} from "~/generated";

export class AuthenticationApi extends _AuthenticationApi {
	/**
	 * Wrapper function of {@link _AuthenticationApi.getOrRefreshToken} for token exchange.
	 * @param request {@link ObtainToken} but without `grant_type` field.
	 * @param options Axios request configuration.
	 * @returns API response.
	 */
	async exchangeToken(
		request: Omit<ObtainToken, "grant_type">,
		// biome-ignore lint/suspicious/noExplicitAny: Autogenerated code
		options?: AxiosRequestConfig<any>,
		// biome-ignore lint/suspicious/noExplicitAny: Autogenerated code
	): Promise<AxiosResponse<TokenResponse, any>> {
		return this.getOrRefreshToken(
			{ ...request, grant_type: ObtainTokenGrantTypeEnum.AuthorizationCode },
			options,
		).then((response) => {
			if (isErrorResponse(response.data)) {
				throw new Error(
					`Request failed with error: ${response.data.errorMessage}`,
				);
			}
			// biome-ignore lint/suspicious/noExplicitAny: Autogenerated code
			return response as AxiosResponse<TokenResponse, any>;
		});
	}

	/**
	 * Wrapper function of {@link _AuthenticationApi.getOrRefreshToken} for token refresh.
	 * @param request {@link RefreshToken} but without `grant_type` field.
	 * @param options Axios request configuration.
	 * @returns API response.
	 */
	async refreshToken(
		request: Omit<RefreshToken, "grant_type">,
		// biome-ignore lint/suspicious/noExplicitAny: Autogenerated code
		options?: AxiosRequestConfig<any>,
		// biome-ignore lint/suspicious/noExplicitAny: Autogenerated code
	): Promise<AxiosResponse<TokenResponse, any>> {
		return this.getOrRefreshToken(
			{ ...request, grant_type: RefreshTokenGrantTypeEnum.RefreshToken },
			options,
		).then((response) => {
			if (isErrorResponse(response.data)) {
				throw new Error(
					`Request failed with error: ${response.data.errorMessage}`,
				);
			}
			// biome-ignore lint/suspicious/noExplicitAny: Autogenerated code
			return response as AxiosResponse<TokenResponse, any>;
		});
	}
}

/**
 * Determine response is error or not.
 * @param data Response data to judge.
 * @returns Whether it is error.
 */
function isErrorResponse(
	data: GetOrRefreshToken200Response,
): data is TokenErrorResponse {
	return "result" in data && data.result === false;
}
