openapi: 3.0.3
info:
  title: Raindrop API (Unofficial)
  description: |-
    **UNOFFICIAL** OpenAPI specification of Raindrop API.

    This OpenAPI spec has been made by hand with reference to official documentation because it is not provided by Raindrop.io.

    Because official documentation not maintained well, there are very (highly) likely to have mismatch in schemas.
    As we can't inspect and address all issues, schema being updated as we find issues.

    Any contributions are welcome. Bug report, schema update, adding descriptions or functions, please don't hesitate to create an issue.
  version: 0.1.0
  termsOfService: https://developer.raindrop.io/terms
  contact:
    name: API documentation issues
    url: https://github.com/lasuillard/raindrop-client/issues
externalDocs:
  description: Official Raindrop API documentation
  url: https://developer.raindrop.io/
servers:
  - url: https://api.raindrop.io
    description: Raindrop API Server
tags:
  - name: authentication
    externalDocs:
      description: Official documentation
      url: https://developer.raindrop.io/v1/authentication
  - name: collection
    externalDocs:
      description: Official documentation
      url: https://developer.raindrop.io/v1/collections
  - name: raindrop
    externalDocs:
      description: Official documentation
      url: https://developer.raindrop.io/v1/raindrops
  - name: highlight
    externalDocs:
      description: Official documentation
      url: https://developer.raindrop.io/v1/highlights
  - name: user
    externalDocs:
      description: Official documentation
      url: https://developer.raindrop.io/v1/user
  - name: tag
    externalDocs:
      description: Official documentation
      url: https://developer.raindrop.io/v1/tags
  - name: filter
    externalDocs:
      description: Official documentation
      url: https://developer.raindrop.io/v1/filters
  - name: import
    externalDocs:
      description: Official documentation
      url: https://developer.raindrop.io/v1/import
security:
  - bearerAuth: []
paths:
  /v1/oauth/authorize:
    get:
      operationId: authorize
      tags:
        - authentication
      summary: Authorization request
      description: |-
        Direct the user to our authorization URL with specified request parameters.

        - If the user is not logged in, they will be asked to log in

        - The user will be asked if he would like to grant your application access to his Raindrop.io data
      # checkov:skip=CKV_OPENAPI_5:Auth endpoint open to unauthorized users
      security: []
      parameters:
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
        - name: client_id
          in: query
          required: true
          schema:
            type: string
      responses:
        307:
          description: Direct to Raindrop authorization page.
  /v1/oauth/access_token:
    post:
      operationId: getOrRefreshToken
      tags:
        - authentication
      summary: Obtain or refresh access token
      description: |
        Once you have the authorization code, you can exchange it for the `access_token` by doing a POST request with all required body parameters as JSON.

        For security reasons access tokens (except "test tokens") will expire after two weeks. In this case you should request the new one, by calling POST request with body parameters (JSON).
      security: []
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/ObtainToken"
                - $ref: "#/components/schemas/RefreshToken"
            examples:
              Obtain new token:
                value:
                  code: c8983220-1cca-4626-a19d-801a6aae003c
                  client_id: 5e1c589cf6f48c0211311383
                  redirect_uri: https://oauthdebugger.com/debug
                  client_secret: c3363988-9d27-4bc6-a0ae-d126ce78dc09
                  grant_type: authorization_code
              Refresh existing token:
                value:
                  client_id: 5e1c589cf6f48c0211311383
                  client_secret: c3363988-9d27-4bc6-a0ae-d126ce78dc09
                  grant_type: refresh_token
                  # checkov:skip=CKV_SECRET_6:Just an example secrets
                  refresh_token: c8080368-fad2-4a9f-b2c9-73d3z850111b
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TokenResponse"
                  - $ref: "#/components/schemas/TokenErrorResponse"
        400:
          description: Occurs when code parameter is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum: [bad_authorization_code]
  /rest/v1/collections:
    get:
      operationId: getRootCollections
      tags:
        - collection
      summary: Get root collections
      description: Returns JSON-encoded array containing all root collections.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponseMany"
    put:
      operationId: reorderAllCollections
      tags:
        - collection
      summary: Reorder all collections
      description: Updates order of all collections
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    sort:
                      $ref: "#/components/schemas/SortBy"
                - type: object
                  properties:
                    expanded:
                      type: boolean
                      description: |-
                        TRUE = expand all

                        FALSE = collapse all
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
    delete:
      operationId: removeCollections
      tags:
        - collection
      summary: Remove multiple collections
      description: |-
        Remove multiple collections at once.

        Nested collections are ignored (include ID's in ids array to remove them)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                # checkov:skip=CKV_OPENAPI_21:Source documentation does not provide max item detail
                ids:
                  type: array
                  items:
                    $ref: "#/components/schemas/CollectionID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - type: object
                    properties:
                      ids:
                        type: array
                        items:
                          type: integer
                      modified:
                        type: integer
  /rest/v1/collections/childrens:
    get:
      operationId: getChildCollections
      tags:
        - collection
      summary: Get child collections
      description: Returns JSON-encoded array containing all nested collections (that have positive `parent.$id`)
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponseMany"
  /rest/v1/collection/{id}:
    parameters:
      - name: id
        in: path
        description: Collection ID
        required: true
        schema:
          $ref: "#/components/schemas/CollectionID"
    get:
      operationId: getCollection
      tags:
        - collection
      summary: Get collection
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponseOne"
    put:
      operationId: updateCollection
      tags:
        - collection
      summary: Update collection
      description: Update an existing collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCollection"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponseOne"
    delete:
      operationId: removeCollection
      tags:
        - collection
      summary: Remove collection
      description: |-
        Remove an existing collection and all its descendants.

        Raindrops will be moved to "Trash" collection
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /rest/v1/collection:
    post:
      operationId: createCollection
      tags:
        - collection
      summary: Create collection
      description: Create a new collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollection"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponseOne"
        400:
          description: "Incorrect 'view' field value"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ErrorResponse"
                  - example:
                      result: false
                      error: view
                      errorMessage: "Collection validation failed: view: `bla` is not a valid enum value for path `view`."
  /rest/v1/collection/{id}/cover:
    put:
      operationId: uploadCollectionCover
      tags:
        - collection
      summary: Upload cover
      description: It's possible to upload cover from desktop. PNG, GIF and JPEG supported
      parameters:
        - name: id
          in: path
          required: true
          description: Existing collection ID
          schema:
            $ref: "#/components/schemas/CollectionID"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                cover:
                  type: string
                  format: binary
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CollectionResponseOne"
  /rest/v1/collections/merge:
    put:
      operationId: mergeCollections
      tags:
        - collection
      summary: Merge collections
      description: Merge multiple collections
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  $ref: "#/components/schemas/CollectionID"
                ids:
                  type: array
                  items:
                    $ref: "#/components/schemas/CollectionID"
      responses:
        200:
          description: Success
  /rest/v1/collections/clean:
    put:
      operationId: removeAllEmptyCollections
      tags:
        - collection
      summary: Remove all empty collections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 3
  /rest/v1/collection/-99:
    delete:
      operationId: emptyTrash
      tags:
        - collection
      summary: Empty Trash
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /rest/v1/user/stats:
    get:
      operationId: getSystemCollectionStats
      tags:
        - collection
        - user
      summary: Get system collections count
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatResponse"
  /rest/v1/collection/{id}/sharing:
    parameters:
      - name: id
        in: path
        description: Existing collection ID
        required: true
        schema:
          $ref: "#/components/schemas/CollectionID"
    get:
      operationId: getCollaborators
      summary: Get collaborators list of collection
      tags:
        - collection
      responses:
        200:
          description: Success
    post:
      operationId: shareCollection
      tags:
        - collection
      summary: Share collection
      description: Share collection with another user(s). As result invitation(s) will be send to specified email(s) with link to join collection.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: "#/components/schemas/Role"
                emails:
                  type: array
                  description: |-
                    The user email(s) with whom to share the project.

                    Maximum 10
                  items:
                    type: string
                    format: email
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                    example: true
                  emails:
                    type: array
                    items:
                      type: string
                      format: email
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  errorMessage:
                    type: string
              examples:
                Email is empty:
                  value:
                    result: false
                    errorMessage: "no emails"
                Length of email is large than 10:
                  value:
                    result: false
                    errorMessage: you cant send more than 10 invites at once
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  errorMessage:
                    type: string
              examples:
                Too many (100+) pending invitations:
                  value:
                    result: false
                    errorMessage: you have too many pending invitations, you will be banned if you continue send more
                Not enough permission:
                  value:
                    result: false
                    errorMessage: you dont have permissions to invite more people
    delete:
      operationId: unshareOrLeaveCollection
      tags:
        - collection
      summary: Unshare or leave collection
      description: |-
        There two possible results of calling this method, depends on who authenticated user is:
        - Owner: collection will be unshared and all collaborators will be removed
        - Member or viewer: authenticated user will be removed from collaborators list
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /rest/v1/collection/{id}/sharing/{userId}:
    parameters:
      - name: userId
        in: path
        description: User ID of collaborator
        required: true
        schema:
          type: integer
      - name: id
        in: path
        description: Existing collection ID
        required: true
        schema:
          $ref: "#/components/schemas/CollectionID"
    put:
      operationId: changeCollaboratorAccessLevel
      tags:
        - collection
      summary: Change access level of collaborator
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: "#/components/schemas/Role"
      responses:
        200:
          description: Success
    delete:
      operationId: deleteCollaborator
      tags:
        - collection
      summary: Delete a collaborator
      description: Remove an user from shared collection
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /rest/v1/collection/{id}/join:
    post:
      operationId: acceptInvitation
      tags:
        - collection
      summary: Accept an invitation
      description: Accept an invitation to join a shared collection
      parameters:
        - name: id
          in: path
          description: Existing collection
          required: true
          schema:
            $ref: "#/components/schemas/CollectionID"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  role:
                    $ref: "#/components/schemas/Role"
        403:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Incorrect token:
                  value:
                    result: false
                    error: CollaboratorsIncorrectToken
                    errorMessage: Incorrect or expired token
                Collection no more exists:
                  value:
                    result: false
                    error: CollaboratorsNoCollection
                    errorMessage: Shared collection not found or removed
                Is collaborator already:
                  value:
                    result: false
                    error: CollaboratorsAlready
                    errorMessage: You already owner of this collection
  /rest/v1/collections/covers/{text}:
    get:
      operationId: searchCovers
      tags:
        - collection
      summary: Search for cover
      description: Search for specific cover (icon)
      parameters:
        - name: text
          in: path
          required: true
          description: For example "pokemon"
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoverResponse"
  /rest/v1/collections/covers:
    get:
      operationId: getFeaturedCovers
      tags:
        - collection
      summary: Featured covers
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoverResponse"
  /rest/v1/raindrop:
    post:
      operationId: createRaindrop
      tags:
        - raindrop
      summary: Create raindrop
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRaindrop"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaindropResponseOne"
  /rest/v1/raindrop/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Existing raindrop ID
        schema:
          type: integer
    get:
      operationId: getRaindrop
      tags:
        - raindrop
        - highlight
      summary: Get raindrop
      responses:
        200:
          description: Success
    put:
      operationId: updateRaindrop
      tags:
        - raindrop
        - highlight
      summary: Update raindrop
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRaindrop"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaindropResponseOne"
    delete:
      operationId: removeRaindrop
      tags:
        - raindrop
      summary: Remove raindrop
      description: When you remove raindrop it will be moved to user Trash collection. But if you try to remove raindrop from Trash, it will be removed permanently.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /rest/v1/raindrop/file:
    put:
      operationId: uploadFile
      tags:
        - raindrop
      summary: Upload file
      description: Make sure to send PUT request with [multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST#example) body
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File
                collectionId:
                  type: integer
                  description: Collection Id
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaindropResponseOne"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                File is not specified:
                  value:
                    result: false
                    error: -1
                    errorMessage: no file
                Unsupported file format:
                  value:
                    result: false
                    error: file_invalid
                    errorMessage: File is invalid
                File size is big:
                  value:
                    result: false
                    error: file_size_limit
                    errorMessage: File size limit
  /rest/v1/raindrop/{id}/cover:
    put:
      operationId: uploadRaindropCover
      tags:
        - raindrop
      summary: Upload cover
      description: PNG, GIF or JPEG
      parameters:
        - name: id
          in: path
          required: true
          description: Existing raindrop ID
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                cover:
                  type: string
                  format: binary
                  description: File
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaindropResponseOne"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                File is not specified:
                  value:
                    result: false
                    error: -1
                    errorMessage: no file
                Unsupported file format:
                  value:
                    result: false
                    error: file_invalid
                    errorMessage: File is invalid
                File size is big:
                  value:
                    result: false
                    error: file_size_limit
                    errorMessage: File size limit
  /rest/v1/raindrop/{id}/cache:
    get:
      operationId: getPermanentCopy
      tags:
        - raindrop
      summary: Get permanent copy
      description: Links permanently saved with all content (only in PRO plan). Using this method you can navigate to this copy.
      parameters:
        - name: id
          in: path
          description: Existing raindrop ID
          required: true
          schema:
            type: integer
      responses:
        307:
          description: Success
          headers:
            Location:
              schema:
                type: string
                example: https://s3.aws...
  /rest/v1/raindrop/suggest:
    post:
      operationId: suggestForNewBookmark
      tags:
        - raindrop
      summary: Suggest collection and tags for new bookmark
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                link:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestResponse"
  /rest/v1/raindrop/{id}/suggest:
    get:
      operationId: suggestForExistingBookmark
      tags:
        - raindrop
      summary: Suggest collection and tags for existing bookmark
      parameters:
        - name: id
          in: path
          description: Bookmark id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuggestResponse"
  /rest/v1/raindrops/{collectionId}:
    parameters:
      - name: collectionId
        description: Collection ID
        in: path
        required: true
        schema:
          type: integer
    get:
      operationId: getRaindrops
      tags:
        - raindrop
      summary: Get raindrops
      parameters:
        - name: sort
          in: query
          schema:
            type: string
        - name: perpage
          in: query
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
        - name: search
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaindropResponseMany"
    put:
      operationId: updateRaindrops
      tags:
        - raindrop
      summary: Update many raindrops
      description: |-
        Specify optional search and/or ids parameters to limit raindrops that will be updated.
        Possible fields that could be updated are described in "Body Parameters"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                important:
                  type: boolean
                  description: |-
                    TRUE - mark as "favorite"

                    FALSE - unmark as "favorite"
                tags:
                  type: array
                  description: |-
                    Will append specified tags to raindrops.
                    Or will remove all tags from raindrops if [] (empty array) is specified
                  items:
                    type: string
                media:
                  type: array
                  items:
                    type: string
                    description: |-
                      Will append specified media items to raindrops.
                      Or will remove all media from raindrops if [] (empty array) is specified
                    format: uri
                cover:
                  type: string
                  description: |-
                    Set URL for cover.
                    Tip: specify <screenshot> to set screenshots for all raindrops
                collection:
                  type: object
                  description: |-
                    Specify {"$id": collectionId} to move raindrops to other collection
                  properties:
                    $id:
                      type: integer
      responses:
        200:
          description: Success
    delete:
      operationId: removeRaindrops
      tags:
        - raindrop
      summary: Remove many raindrops
      description: |-
        Specify optional search and/or ids parameters to limit raindrops that will be moved to "Trash"
        When :collectionId is -99, raindrops will be permanently removed!
      parameters:
        - name: search
          in: query
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
                  modified:
                    type: integer
  /rest/v1/raindrops:
    post:
      operationId: createRaindrops
      tags:
        - raindrop
      summary: Create many raindrops
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  description: |-
                    Array of objects. Format of single object described in "Create single raindrop".
                    Maximum 100 objects in array!
                  items:
                    $ref: "#/components/schemas/CreateRaindrop"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RaindropResponseMany"
  /rest/v1/highlights:
    get:
      operationId: getAllHighlights
      tags:
        - highlight
      summary: Get all highlights
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: perpage
          in: query
          description: How many highlights per page. 50 max. Default 25
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HighlightResponse"
  /rest/v1/highlights/{collectionId}:
    get:
      operationId: getHighlightsInCollection
      tags:
        - highlight
      summary: Get all highlights in a collection
      parameters:
        - name: collectionId
          description: Collection ID
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          schema:
            type: integer
        - name: perpage
          in: query
          description: How many highlights per page. 50 max. Default 25
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HighlightResponse"
  /rest/v1/user:
    get:
      operationId: getCurrentUser
      tags:
        - user
      summary: Get user
      description: Get currently authenticated user details
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        401:
          description: Unauthenticated
          content:
            text/plain:
              schema:
                type: string
                example: Unauthorized
    put:
      operationId: updateCurrentUser
      tags:
        - user
      summary: Update user
      description: To change email, config, password, etc... you can do it from single endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                groups:
                  type: array
                  items:
                    $ref: "#/components/schemas/Group"
                config:
                  $ref: "#/components/schemas/UserConfig"
                newpassword:
                  type: string
                oldpassword:
                  type: string
                fullName:
                  type: string
                email:
                  type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                Email specified but empty:
                  value:
                    result: false
                    error: 1
                    errorMessage: email required
                fullName specified but empty:
                  value:
                    result: false
                    error: 2
                    errorMessage: "User validation failed: fullName: is required"
                newpassword specified, but oldpassword is empty:
                  value:
                    result: false
                    error: 3
                    errorMessage: oldpassword incorrect
                incorrect config key value:
                  value:
                    result: false
                    error: config.raindrops_sort
                    errorMessage: "User validation failed: config.raindrops_sort: `1` is not a valid enum value for path `raindrops_sort`., config: Validation failed: raindrops_sort: `1` is not a valid enum value for path `raindrops_sort`."
  /rest/v1/user/{name}:
    get:
      operationId: getPublicUserByName
      tags:
        - user
      summary: Get user by name
      description: Get's publicly available user details
      parameters:
        - name: name
          in: path
          description: Username
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      _id:
                        type: integer
                      email_MD5:
                        $ref: "#/components/schemas/MD5"
                      fullName:
                        type: string
                      pro:
                        type: boolean
                      registered:
                        type: string
                        format: date-time
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /rest/v1/user/connect/{provider}:
    get:
      operationId: connectSocialNetworkProvider
      tags:
        - user
      summary: Connect social network acount
      description: Connect social network account as sign in authentication option
      parameters:
        - name: provider
          in: path
          required: true
          description: facebook google twitter vkontakte dropbox or gdrive
          schema:
            type: string
            enum: [facebook, google, twitter, vkontate, dropbox, gdrive]
      responses:
        307:
          description: Temporary redirect
          headers:
            Location:
              schema:
                type: string
                example: https://some.com/...
  /rest/v1/user/connect/{provider}/revoke:
    get:
      operationId: disconnectSocialNetworkProvider
      tags:
        - user
      summary: Disconnect social network account
      description: Disconnect social network account from available authentication options
      parameters:
        - name: provider
          in: path
          required: true
          description: facebook google twitter vkontakte dropbox or gdrive
          schema:
            type: string
            enum: [facebook, google, twitter, vkontate, dropbox, gdrive]
      responses:
        200:
          description: Success
  /rest/v1/tags/{collectionId}:
    get:
      operationId: getTagsInCollection
      tags:
        - tag
      summary: Get tags
      parameters:
        - name: collectionId
          in: path
          required: false
          description: Optional collection ID, when not specified all tags from all collections will be retrieved
          schema:
            type: integer
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            count:
                              type: integer
    put:
      operationId: renameOrMergeTags
      tags:
        - tag
      summary: Rename tag / Merge tags
      parameters:
        - name: collectionId
          in: path
          required: false
          description: It's possible to restrict rename action to just one collection. It's optional
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                replace:
                  type: string
                  description: New name
                tags:
                  type: array
                  description: |-
                    Rename: Specify **array** with **only one** string (name of a tag)

                    Merge: List of tags
                  items:
                    type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
    delete:
      operationId: removeTagsFromCollection
      tags:
        - tag
      summary: Remove tags
      parameters:
        - name: collectionId
          in: path
          required: false
          description: It's possible to restrict rename action to just one collection. It's optional
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  description: List of tags
                  items:
                    type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response"
  /rest/v1/filters/{collectionId}:
    get:
      operationId: getFilters
      tags:
        - filter
      summary: Get filters
      parameters:
        - name: collectionId
          description: Collection ID
          in: path
          required: true
          schema:
            type: integer
        - name: tagsSort
          in: query
          description: "Sort tags by: `-count` by count, default `_id` by name"
          schema:
            type: string
            enum: [-count, _id]
        - name: search
          in: query
          description: Check "raindrops" documentation for more details
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilterResponse"
  /rest/v1/import/url/parse:
    get:
      operationId: parseURL
      tags:
        - import
      summary: Parse URL
      description: Parse and extract useful info from any URL
      parameters:
        - name: url
          in: query
          description: URL
          schema:
            type: string
            format: uri
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/ParseUrlResponse"
                  - $ref: "#/components/schemas/ParseUrlErrorResponse"
              examples:
                Success:
                  value:
                    item:
                      title: Яндекс
                      excerpt: Найдётся всё
                      media:
                        - type: image
                          link: http://yastatic.net/s3/home/logos/share/share-logo_ru.png
                      type: link
                      meta:
                        possibleArticle: false
                        canonical: https://ya.ru
                        site: Яндекс
                        tags: []
                    result: true
                Invalid URL:
                  value:
                    error: not_found
                    errorMessage: invalid_url
                    item:
                      title: Fdfdfdf
                      excerpt: ""
                      media:
                        - link: <screenshot>
                      type: link
                      parser: local
                      meta:
                        possibleArticle: false
                        tags: []
                    result: true
                Not found:
                  value:
                    error: not_found
                    errorMessage: url_status_404
                    item:
                      title: Some
                      excerpt: ""
                      media:
                        - link: <screenshot>
                      type: link
                      parser: local
                      meta:
                        possibleArticle: false
                        tags: []
                    result: true
  /rest/v1/import/url/exists:
    post:
      operationId: checkURLsExist
      tags:
        - import
      summary: Check URL(s) existence
      description: Does specified URL's are already saved?
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                urls:
                  type: array
                  items:
                    type: string
                    format: uri
                    description: URL's
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - properties:
                      ids:
                        type: array
                        items:
                          type: integer
              examples:
                Found:
                  value:
                    result: true
                    ids:
                      - 3322
                      - 12323
                Not found:
                  value:
                    result: false
                    ids: []
  /rest/v1/import/file:
    post:
      operationId: importHTMLBookmarkFile
      tags:
        - import
      summary: Parse HTML import file
      description: |-
        Convert HTML bookmark file to JSON.

        Support Nestcape, Pocket and Instapaper file formats
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                import:
                  type: string
                  format: binary
                  description: File
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportFileResponse"
components:
  securitySchemes:
    # checkov:skip=CKV_OPENAPI_3:FIXME
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Response:
      type: object
      required: [result]
      properties:
        result:
          type: boolean
    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [error, errorMessage]
          properties:
            error:
              type: string
            errorMessage:
              type: string
    ObtainToken:
      type: object
      required: [grant_type, code, client_id, client_secret, redirect_uri]
      properties:
        grant_type:
          type: string
          description: Grant type
          enum: [authorization_code]
        code:
          type: string
          description: Received authorization code
        client_id:
          type: string
          description: Unique client ID of your Raindrop.io app
        client_secret:
          type: string
          description: Client secret of your Raindrop.io app
        redirect_uri:
          type: string
          description: Redirect URI registered at your Raindrop.io app
    RefreshToken:
      type: object
      required: [client_id, client_secret, grant_type, refresh_token]
      properties:
        client_id:
          type: string
          description: Unique client ID of your Raindrop.io app
        client_secret:
          type: string
          description: Client secret of your Raindrop.io app
        grant_type:
          type: string
          description: Grant type
          enum: [refresh_token]
        refresh_token:
          type: string
          description: Refresh token received when obtain access token
    TokenResponse:
      type: object
      required: [access_token, refresh_token, expires_in, token_type]
      properties:
        access_token:
          type: string
          description: API access token
        refresh_token:
          type: string
          description: Token used to refresh access token
        expires:
          type: integer
          description: Remaining time until access token expires, in miliseconds
          deprecated: true
        expires_in:
          type: integer
          description: Reamining time until access token expires, in seconds
        token_type:
          type: string
          description: Type of token
          enum: [Bearer]
    TokenErrorResponse:
      type: object
      required: [result, status, errorMessage]
      properties:
        result:
          type: boolean
        status:
          type: integer
        errorMessage:
          type: string
    Collection:
      type: object
      required:
        [
          _id,
          access,
          collaborators,
          color,
          count,
          cover,
          created,
          expanded,
          lastUpdate,
          public,
          sort,
          title,
          user,
          view,
        ]
      properties:
        _id:
          type: integer
          description: The id of the collection.
        access:
          type: object
          required: [level, draggable]
          properties:
            level:
              type: integer
              enum: [1, 2, 3, 4]
              description: |-
                1. read only access (equal to public=true)
                2. collaborator with read only access
                3. collaborator with write only access
                4. owner
            draggable:
              type: boolean
              description: Does it possible to change parent of this collection?
            for:
              type: number
            root:
              type: boolean
        count:
          type: integer
          description: Count of raindrops in collection
        cover:
          type: array
          description: Collection cover URL. This array always have one item due to legacy reasons
          items:
            type: string
            format: uri
        created:
          type: string
          description: When collection is created
          format: date-time
        expanded:
          type: boolean
          description: Whether the collection’s sub-collections are expanded
        lastUpdate:
          type: string
          description: When collection is updated
          format: date-time
        parent:
          $ref: "#/components/schemas/CollectionRef"
        public:
          type: boolean
          description: Collection and raindrops that it contains will be accessible without authentication by public link
        sort:
          $ref: "#/components/schemas/Sort"
        title:
          type: string
          description: Name of the collection
        description:
          type: string
        user:
          allOf:
            - $ref: "#/components/schemas/UserRef"
            - properties:
                $id:
                  type: integer
                  description: Owner ID
        view:
          $ref: "#/components/schemas/View"
        creatorRef:
          type: object
          properties:
            _id:
              type: number
            name:
              type: string
            email:
              type: string
        lastAction:
          type: string
          format: date-time
        slug:
          type: string
        author:
          type: boolean
        __v:
          type: number

    CollectionResponseOne:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [items]
          properties:
            item:
              $ref: "#/components/schemas/Collection"
    CollectionResponseMany:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [items]
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Collection"
    CreateCollection:
      type: object
      required: [view, title, sort, public, cover]
      properties:
        view:
          $ref: "#/components/schemas/View"
        title:
          type: string
          description: "Name of the collection"
        sort:
          $ref: "#/components/schemas/Sort"
        public:
          type: boolean
          description: "Collection and raindrops that it contains will be accessible without authentication?"
        parent:
          $ref: "#/components/schemas/CollectionRef"
        cover:
          type: array
          items:
            type: string
            format: uri
    UpdateCollection:
      allOf:
        - $ref: "#/components/schemas/CreateCollection"
        - type: object
          required: [expanded]
          properties:
            expanded:
              type: boolean
              description: "Whether the collection`s sub-collections are expanded"
    StatResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [items, meta]
          properties:
            items:
              type: array
              items:
                type: object
                required: [_id, count]
                properties:
                  _id:
                    type: integer
                  count:
                    type: integer
            meta:
              type: object
              required: [pro, _id, changedBookmarksDate, duplicates, broken]
              properties:
                pro:
                  type: boolean
                _id:
                  type: integer
                changedBookmarksDate:
                  type: string
                  format: date-time
                duplicates:
                  type: object
                  required: [count]
                  properties:
                    count:
                      type: integer
                broken:
                  type: object
                  required: [count]
                  properties:
                    count:
                      type: integer
    Cover:
      type: object
      required: [title, icons]
      properties:
        title:
          type: string
        icons:
          type: array
          items:
            type: object
            required: [png] # SVG possibly not given
            properties:
              png:
                type: string
                format: uri
              svg:
                type: string
                format: uri
    CoverResponse:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [items]
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Cover"
    RaindropBase:
      type: object
      required:
        [
          created,
          lastUpdate,
          order,
          important,
          reminder,
          tags,
          media,
          cover,
          collection,
          type,
          excerpt,
          note,
          title,
          link,
          highlights,
        ]
      properties:
        created:
          type: string
          format: date-time
        lastUpdate:
          type: string
          format: date-time
        sort:
          type: integer
          description: |-
            Specify sort order (ascending).

            For example if you want to move raindrop to the first place set this field to 0
        important:
          type: boolean
          description: Marked as "favorite"
        reminder:
          type: object
          required: [date]
          properties:
            date:
              type: string
              format: uri
              nullable: true
        tags:
          type: array
          items:
            type: string
          description: Tags list
        media:
          type: array
          items:
            type: object
            required: [type, link]
            properties:
              type:
                type: string
                enum: [link, image]
              link:
                type: string
                format: uri
        cover:
          type: string
        collection:
          $ref: "#/components/schemas/CollectionRef"
        type:
          type: string
        excerpt:
          type: string
        note:
          type: string
        title:
          type: string
        link:
          type: string
        highlights:
          type: array
          items:
            $ref: "#/components/schemas/Highlight"
    Raindrop:
      allOf:
        - $ref: "#/components/schemas/RaindropBase"
        - type: object
          required: [_id, domain, user, broken, cache, creatorRef]
          properties:
            _id:
              type: integer
              description: Unique identifier
            domain:
              type: string
              description: |-
                Hostname of a link.
                Files always have `raindrop.io` hostname
            creatorRef:
              $ref: "#/components/schemas/CreatorRef"
            user:
              $ref: "#/components/schemas/UserRef"
            broken:
              type: boolean
              description: Marked as broken (original link is not reachable anymore)
            cache:
              type: object
              description: Permanent copy (cached version) details
              required: [status, size, created]
              properties:
                status:
                  type: string
                  description: ready retry failed invalid-origin invalid-timeout or invalid-size
                  enum:
                    [
                      ready,
                      retry,
                      failed,
                      invalid-origin,
                      invalid-timeout,
                      invalid-size,
                    ]
                size:
                  type: integer
                  description: Full size in bytes
                created:
                  type: string
                  format: date-time
                  description: Date when copy is successfully made
            file:
              type: object
              description: |-
                This raindrop uploaded from desktop
                [Supported file formats](https://help.raindrop.io/article/48-uploading-files)
              required: [name, size, type]
              properties:
                name:
                  type: string
                  description: File name
                size:
                  type: integer
                  description: File size in bytes
                type:
                  type: string
                  description: Mime type
    RaindropResponseOne:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [item, author]
          properties:
            item:
              $ref: "#/components/schemas/Raindrop"
            author:
              type: boolean
    RaindropResponseMany:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [items, count, collectionId]
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Raindrop"
            count:
              type: integer
            collectionId:
              $ref: "#/components/schemas/CollectionID"
    CreateRaindrop:
      allOf:
        - $ref: "#/components/schemas/RaindropBase"
        - properties:
            pleaseParse:
              type: object
              description: Specify empty object to automatically parse meta data (cover, description, html) in the background
    Highlight:
      type: object
      required: [_id, text, color, note, created]
      properties:
        _id:
          type: string
          description: Unique id of highlight
        text:
          type: string
          description: Text of highlight (required)
        color:
          type: string
          description: |-
            Color of highlight.
            Default yellow

            Can be blue, brown, cyan, gray, green, indigo, orange, pink, purple, red, teal, yellow
          enum:
            [
              blue,
              brown,
              cyan,
              gray,
              green,
              indigo,
              orange,
              pink,
              purple,
              red,
              teal,
              yellow,
            ]
        note:
          type: string
          description: Optional note for highlight
        created:
          type: string
          description: Creation date of highlight
    HighlightItem:
      allOf:
        - $ref: "#/components/schemas/Highlight"
        - required: [raindropRef, link, title, tags]
          properties:
            raindropRef:
              type: integer
            link:
              type: string
              format: uri
            title:
              type: string
            tags:
              type: array
              items:
                type: string
    HighlightResponse:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [items]
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/HighlightItem"
    Suggest:
      type: object
      required: [collections, tags]
      properties:
        collections:
          type: array
          items:
            $ref: "#/components/schemas/CollectionRef"
        tags:
          type: array
          items:
            type: string
    SuggestResponse:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [item]
          properties:
            item:
              $ref: "#/components/schemas/Suggest"
    UserConfig:
      type: object
      required:
        [
          broken_level,
          font_size,
          last_collection,
          raindrops_sort,
          raindrops_view,
        ]
      properties:
        broken_level:
          type: string
        font_color:
          type: string
        font_size:
          type: integer
        lang:
          type: string
        last_collection:
          type: integer
        raindrops_buttons:
          type: array
          items:
            type: string
        raindrops_hide:
          type: array
          items:
            type: string
        raindrops_search_by_score:
          type: boolean
        raindrops_search_incollection:
          type: boolean
        raindrops_sort:
          $ref: "#/components/schemas/SortBy"
        default_collection_view:
          type: string
        nested_view_legacy:
          type: boolean
        add_default_collection:
          type: number
        acknowledge:
          type: array
        ai_suggestions:
          type: boolean
    User:
      type: object
      required:
        [_id, config, email, files, fullName, groups, password, pro, registered]
      properties:
        _id:
          type: integer
        config:
          $ref: "#/components/schemas/UserConfig"
        dropbox:
          type: object
          required: [enabled]
          properties:
            enabled:
              type: boolean
        email:
          type: string
          format: email
        email_MD5:
          $ref: "#/components/schemas/MD5"
        files:
          type: object
          required: [used, size, lastCheckPoint]
          properties:
            used:
              type: integer
            size:
              type: integer
            lastCheckPoint:
              type: string
              format: date-time
        fullName:
          type: string
        gdrive:
          type: object
          required: [enabled]
          properties:
            enabled:
              type: boolean
        groups:
          type: array
          items:
            $ref: "#/components/schemas/Group"
        password:
          type: boolean
        pro:
          type: boolean
        proExpire:
          type: string
          format: date-time
        registered:
          type: string
          format: date-time
        tfa:
          type: object
          properties:
            enabled:
              type: boolean
        name:
          type: string
        avatar:
          type: string
        lastAction:
          type: string
          format: date-time
        lastVisit:
          type: string
          format: date-time
        lastUpdate:
          type: string
          format: date-time

    Group:
      type: object
      required: [title, hidden, sort, collections]
      properties:
        title:
          type: string
        hidden:
          type: boolean
        sort:
          type: integer
        collections:
          type: array
          items:
            type: integer
    UserResponse:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [user]
          properties:
            user:
              $ref: "#/components/schemas/User"
    Filter:
      type: object
      required: [broken, duplicates, important, notag, tags, types]
      properties:
        broken:
          type: object
          required: [count]
          properties:
            count:
              type: integer
        duplicates:
          type: object
          required: [count]
          properties:
            count:
              type: integer
        important:
          type: object
          required: [count]
          properties:
            count:
              type: integer
        notag:
          type: object
          required: [count]
          properties:
            count:
              type: integer
        tags:
          type: array
          items:
            type: object
            required: [_id, count]
            properties:
              _id:
                type: string
              count:
                type: integer
        types:
          type: array
          items:
            type: object
            required: [_id, count]
            properties:
              _id:
                type: string
              count:
                type: integer
    FilterResponse:
      allOf:
        - $ref: "#/components/schemas/Response"
        - $ref: "#/components/schemas/Filter"
    UrlParse:
      type: object
      required: [title, excerpt, media, type, meta]
      properties:
        title:
          type: string
        excerpt:
          type: string
        media:
          type: array
          items:
            type: object
            required: [type, link]
            properties:
              type:
                type: string
              link:
                type: string
                format: uri
        type:
          type: string
        meta:
          type: object
          required: [possibleArticle, canonical, site, tags]
          properties:
            possibleArticle:
              type: boolean
            canonical:
              type: string
            site:
              type: string
            tags:
              type: array
              items:
                type: string
    UrlParseResponse:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [item]
          properties:
            item:
              $ref: "#/components/schemas/UrlParse"
    UrlParseErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - required: [item]
          properties:
            item:
              $ref: "#/components/schemas/UrlParse"
    Bookmark:
      type: object
      required: [link, title, lastUpdate, tags, excerpt]
      properties:
        link:
          type: string
          format: uri
        title:
          type: string
        lastUpdate:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
        excerpt:
          type: string
    Folder:
      type: object
      required: [title, folders, bookmarks]
      properties:
        title:
          type: string
        folders:
          type: array
          items:
            $ref: "#/components/schemas/Folder"
        bookmarks:
          type: array
          items:
            $ref: "#/components/schemas/Bookmark"
    ImportFileResponse:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [items]
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/Folder"
    CollectionID:
      type: integer
      description: |-
        Collection ID. Reserved system collection IDs are:

        - -99 for Trash
        - -1 for Unsorted
        - 0 for All
    View:
      type: string
      description: |-
        View style of collection, can be:
        - list (default)
        - simple
        - grid
        - masonry

          Pinterest like grid
      enum: [list, simple, grid, masonry]
    Sort:
      type: integer
      description: "The order of collection (descending). Defines the position of the collection among all the collections with the same `parent.$id`"
    SortBy:
      type: string
      description: |-
        Change order of all collections.

        Possible values:

        "title" - sort alphabetically ascending

        "-title" - sort alphabetically descending

        "-count" - sort by raindrops count descending
    Role:
      type: string
      enum: [member, viewer]
    CollectionRef:
      type: object
      required: [$ref, $id]
      properties:
        $ref:
          type: string
          enum: [collections]
        $id:
          type: integer
          description: The id of the parent collection. Not specified for root collections
        oid:
          type: integer
    UserRef:
      type: object
      required: [$ref, $id]
      properties:
        $ref:
          type: string
        $id:
          type: integer
    CreatorRef:
      type: object
      required: [_id, avatar, name, email]
      properties:
        _id:
          type: integer
        avatar:
          type: string
        name:
          type: string
        email:
          type: string
    MD5:
      type: string

    ParseUrlResponse:
      allOf:
        - $ref: "#/components/schemas/Response"
        - required: [item]
          properties:
            item:
              $ref: "#/components/schemas/UrlParse"

    ParseUrlErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ErrorResponse"
        - required: [item]
          properties:
            item:
              $ref: "#/components/schemas/UrlParse"
